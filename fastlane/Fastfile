default_platform :ios
opt_out_usage
skip_docs

require 'json'
require 'net/http'
import 'Sonarfile'

xcode_version = ENV['XCODE_VERSION'] || '16.4'
xcode_project = 'StreamCore.xcodeproj'
sdk_names = ['StreamCore', 'StreamCoreUI']
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-core-swift'
derived_data_path = 'derived_data'
source_packages_path = 'spm_cache'
swift_environment_path = File.absolute_path("../Sources/#{sdk_names.first}/Utils/SystemEnvironment+Version.swift")
is_localhost = !is_ci
@force_check = false

before_all do |lane|
  if is_ci
    setup_ci
    setup_git_config
    select_xcode(version: xcode_version) unless [:sonar_upload, :copyright, :merge_main].include?(lane)
  end
end

desc 'Starts a new release'
lane :release do |options|
  extra_changes = lambda do |release_version|
    # Set the framework version in SystemEnvironment+Version.swift
    old_content = File.read(swift_environment_path)
    current_version = old_content[/version: String = "([^"]+)"/, 1]
    new_content = old_content.gsub(current_version, release_version)
    File.open(swift_environment_path, 'w') { |f| f.puts(new_content) }
  end

  release_ios_sdk(
    version: options[:version],
    bump_type: options[:type],
    sdk_names: sdk_names,
    github_repo: github_repo,
    extra_changes: extra_changes,
    create_pull_request: true,
    use_changelog: false
  )
end

lane :merge_release do |options|
  merge_release_to_main(author: options[:author])
  sh('gh workflow run release-publish.yml --ref main')
end

lane :merge_main do
  merge_main_to_develop
  update_release_version_to_snapshot(file_path: swift_environment_path)
  ensure_git_branch(branch: 'develop')
  sh("git add #{swift_environment_path}")
  sh("git commit -m 'Update release version to snapshot'")
  sh('git push')
end

desc 'Completes an SDK Release'
lane :publish_release do |options|
  release_version = get_sdk_version_from_environment
  UI.user_error!("Release #{release_version} has already been published.") if git_tag_exists(tag: release_version, remote: true)
  UI.user_error!('Release version cannot be empty') if release_version.to_s.empty?

  ensure_git_branch(branch: 'main')

  publish_ios_sdk(
    skip_git_status_check: false,
    version: release_version,
    github_repo: github_repo,
    use_changelog: false
  )
end

lane :get_sdk_version_from_environment do
  File.read(swift_environment_path).match(/String\s+=\s+"([\d.]+).*"/)[1]
end

desc 'Runs StreamCore tests'
lane :test do |options|
  next unless is_check_required(sources: sources_matrix[:llc], force_check: @force_check)

  scan_options = {
    project: xcode_project,
    scheme: 'StreamCore',
    testplan: 'StreamCore',
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    devices: options[:device],
    number_of_retries: 3,
    skip_build: options[:skip_build],
    build_for_testing: options[:build_for_testing]
  }

  scan(scan_options)

  slather unless options[:build_for_testing]
end

desc 'Runs StreamCoreUI tests'
lane :test_ui do |options|
  next unless is_check_required(sources: sources_matrix[:ui], force_check: @force_check)

  scan_options = {
    project: xcode_project,
    scheme: 'StreamCoreUI',
    testplan: 'StreamCoreUI',
    clean: is_localhost,
    derived_data_path: derived_data_path,
    cloned_source_packages_path: source_packages_path,
    devices: options[:device],
    number_of_retries: 3,
    skip_build: options[:skip_build],
    build_for_testing: options[:build_for_testing]
  }

  scan(scan_options)
end

desc 'Run fastlane linting'
lane :rubocop do
  next unless is_check_required(sources: sources_matrix[:ruby], force_check: @force_check)

  sh('bundle exec rubocop')
end

desc 'Run PR linting'
lane :lint_pr do
  danger(dangerfile: 'Dangerfile') if is_ci
end

desc 'Run source code formatting/linting'
lane :run_swift_format do |options|
  Dir.chdir('..') do
    strict = options[:strict] ? '--lint' : nil
    sources_matrix[:swiftformat].each do |path|
      sh("swiftformat #{strict} --config .swiftformat #{path}")
      sh("swiftlint lint --config .swiftlint.yml --fix --progress --reporter json #{path}") unless strict
      sh("swiftlint lint --config .swiftlint.yml --strict --progress --reporter json #{path}")
    end
  end
end

lane :install_runtime do |options|
  install_ios_runtime(version: options[:ios], custom_script: 'Scripts/install_ios_runtime.sh')
end

lane :sources_matrix do
  {
    llc: ['Sources/StreamCore/', 'Tests/StreamCoreTests'],
    ui: ['Sources/StreamCoreUI/', 'Tests/StreamCoreUITests'],
    ruby: ['fastlane', 'Gemfile', 'Gemfile.lock'],
    swiftformat: ['Sources', 'Tests', 'Package.swift']
  }
end

lane :copyright do
  update_copyright(ignore: [derived_data_path, source_packages_path, 'vendor/'])
  next unless is_ci

  pr_create(
    title: '[CI] Update Copyright',
    head_branch: "ci/update-copyright-#{Time.now.to_i}"
  )
end
